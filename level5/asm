Dump of assembler code for function o:
   # Usual setup
   0x080484a4 <+0>:     push   %ebp
   0x080484a5 <+1>:     mov    %esp,%ebp

   # Allocating 24 bytes on the stack
   0x080484a7 <+3>:     sub    $0x18,%esp

   # Moving "/bin/sh" (the string at the 0x80485f0 address) into esp to be used as the argument of system 
   0x080484aa <+6>:     movl   $0x80485f0,(%esp)
   # To recap: system("/bin/sh")
   0x080484b1 <+13>:    call   0x80483b0 <system@plt>

   # Moving 1 into esp to be used as the argument of exit 
   0x080484b6 <+18>:    movl   $0x1,(%esp)
   # To recap: exit(1)
   0x080484bd <+25>:    call   0x8048390 <_exit@plt>

Dump of assembler code for function n:
   # Usual setup
   0x080484c2 <+0>:     push   %ebp
   0x080484c3 <+1>:     mov    %esp,%ebp

   # Allocating 536 bytes on the stack
   0x080484c5 <+3>:     sub    $0x218,%esp

   # Moving stdin into eax
   0x080484cb <+9>:     mov    0x8049848,%eax
   # Moving stdin into esp to be used as the third argument of fgets
   0x080484d0 <+14>:    mov    %eax,0x8(%esp)
   # Moving 512 into esp to be used as the second argument of fgets
   0x080484d4 <+18>:    movl   $0x200,0x4(%esp)
   # Calculate the address of ebp - 520, this will be our buffer for fgets, since we allocated 536 bytes for the stack our buffer will therefore be 512 bytes such as char buffer[512], and putting it into eax
   0x080484dc <+26>:    lea    -0x208(%ebp),%eax
   # Moving the address of buffer into esp to be used as the first argument of fgets
   0x080484e2 <+32>:    mov    %eax,(%esp)
   # To recap: fgets(buffer, 512, stdin)
   0x080484e5 <+35>:    call   0x80483a0 <fgets@plt>
   # Calculate the address of buffer and putting it into eax
   0x080484ea <+40>:    lea    -0x208(%ebp),%eax
   # Moving the address of buffer into esp to be used as the argument of printf
   0x080484f0 <+46>:    mov    %eax,(%esp)
   # To recap: printf(buffer)
   0x080484f3 <+49>:    call   0x8048380 <printf@plt>

   # Moving 1 into esp to be used as the argument of exit 
   0x080484f8 <+54>:    movl   $0x1,(%esp)
   # To recap: exit(1)
   0x080484ff <+61>:    call   0x80483d0 <exit@plt>

Dump of assembler code for function main:
   # Usual setup
   0x08048504 <+0>:     push   %ebp
   0x08048505 <+1>:     mov    %esp,%ebp
   0x08048507 <+3>:     and    $0xfffffff0,%esp

   # To recap: n()
   0x0804850a <+6>:     call   0x80484c2 <n>

   # Leaving the function
   0x0804850f <+11>:    leave  
   0x08048510 <+12>:    ret    