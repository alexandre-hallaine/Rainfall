Dump of assembler code for function run:
   # Usual setup
   0x08048444 <+0>:     push   %ebp
   0x08048445 <+1>:     mov    %esp,%ebp

   # Allocating 24 bytes on the stack
   0x08048447 <+3>:     sub    $0x18,%esp

   # Moving stdout into eax
   0x0804844a <+6>:     mov    0x80497c0,%eax
   # Moving stdout into edx
   0x0804844f <+11>:    mov    %eax,%edx
   # Moving "Good... Wait what?\n" (the string at the 0x8048570 address) into eax
   0x08048451 <+13>:    mov    $0x8048570,%eax
   # Moving stdout into esp to be used as the fourth argument of fwrite
   0x08048456 <+18>:    mov    %edx,0xc(%esp)
   # Moving 19 into esp to be used as the third argument of fwrite
   0x0804845a <+22>:    movl   $0x13,0x8(%esp)
   # Moving 1 into esp to be used as the second argument of fwrite
   0x08048462 <+30>:    movl   $0x1,0x4(%esp)
   # Moving "Good... Wait what?\n" into esp to be used as the first argument of fwrite
   0x0804846a <+38>:    mov    %eax,(%esp)
   # To recap: fwrite("Good... Wait what?\n", 1, 19, stdout)
   0x0804846d <+41>:    call   0x8048350 <fwrite@plt>

   # Moving "/bin/sh" (the string at the 0x8048584 address) into esp to be used as the argument of system
   0x08048472 <+46>:    movl   $0x8048584,(%esp)
   # To recap: system("/bin/sh")
   0x08048479 <+53>:    call   0x8048360 <system@plt>

   # Leaving the function
   0x0804847e <+58>:    leave  
   0x0804847f <+59>:    ret 

Dump of assembler code for function main:
   # Usual setup
   0x08048480 <+0>:     push   %ebp
   0x08048481 <+1>:     mov    %esp,%ebp
   0x08048483 <+3>:     and    $0xfffffff0,%esp

   # Allocating 80 bytes on the stack
   0x08048486 <+6>:     sub    $0x50,%esp

   # Calculate the address of esp + 16, this will be our buffer for gets, since we allocated 80 bytes for the stack our buffer will therefore be 64 bytes such as char buffer[64], and putting it into eax
   0x08048489 <+9>:     lea    0x10(%esp),%eax
   # Moving the address of buffer into esp to be used as the argument for gets
   0x0804848d <+13>:    mov    %eax,(%esp)
   # To recap: gets(buffer)
   0x08048490 <+16>:    call   0x8048340 <gets@plt>

   # Leaving the function
   0x08048495 <+21>:    leave  
   0x08048496 <+22>:    ret    