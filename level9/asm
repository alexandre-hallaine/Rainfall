# Function main: Entry point of the program.
# Input: argc (number of command-line arguments),
#        argv (array of command-line arguments).
# This function initializes objects of type N with different values and performs
# various operations on them.
080485f4 <main>:
 # Prologue: Set up the stack frame and allocate space for local variables.
 80485f4:	55                   	push   %ebp
 80485f5:	89 e5                	mov    %esp,%ebp
 80485f7:	53                   	push   %ebx
 80485f8:	83 e4 f0             	and    $0xfffffff0,%esp
 80485fb:	83 ec 20             	sub    $0x20,%esp ; 32 bytes of local variables

 # Main Logic:
 # Exit if not enough arguments are provided
 80485fe:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
 8048602:	7f 0c                	jg     8048610 <main+0x1c> ; jump if argc > 1
 8048604:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804860b:	e8 e0 fe ff ff       	call   80484f0 <_exit@plt> ; exit(1)

 # Create two objects of type N with initial values 5 and 6 respectively.
 8048610:	c7 04 24 6c 00 00 00 	movl   $0x6c,(%esp) ; 108
 8048617:	e8 14 ff ff ff       	call   8048530 <_Znwj@plt> ; operator new
 804861c:	89 c3                	mov    %eax,%ebx
 804861e:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp) ; 5
 8048626:	89 1c 24             	mov    %ebx,(%esp)
 8048629:	e8 c8 00 00 00       	call   80486f6 <_ZN1NC1Ei> ; constructor
 804862e:	89 5c 24 1c          	mov    %ebx,0x1c(%esp)
 8048632:	c7 04 24 6c 00 00 00 	movl   $0x6c,(%esp) ; 108
 8048639:	e8 f2 fe ff ff       	call   8048530 <_Znwj@plt> ; operator new
 804863e:	89 c3                	mov    %eax,%ebx
 8048640:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp) ; 6
 8048648:	89 1c 24             	mov    %ebx,(%esp)
 804864b:	e8 a6 00 00 00       	call   80486f6 <_ZN1NC1Ei> ; constructor
 8048650:	89 5c 24 18          	mov    %ebx,0x18(%esp)

 # Save the pointers to constructed objects and the address of argv[1] for later use.
 8048654:	8b 44 24 1c          	mov    0x1c(%esp),%eax ; object 1
 8048658:	89 44 24 14          	mov    %eax,0x14(%esp)
 804865c:	8b 44 24 18          	mov    0x18(%esp),%eax ; object 2
 8048660:	89 44 24 10          	mov    %eax,0x10(%esp)
 8048664:	8b 45 0c             	mov    0xc(%ebp),%eax ; argv[1]
 8048667:	83 c0 04             	add    $0x4,%eax
 804866a:	8b 00                	mov    (%eax),%eax
 804866c:	89 44 24 04          	mov    %eax,0x4(%esp)

 # Perform setAnnotation on the first object and execute function from vtable on the second object.
 8048670:	8b 44 24 14          	mov    0x14(%esp),%eax
 8048674:	89 04 24             	mov    %eax,(%esp)
 8048677:	e8 92 00 00 00       	call   804870e <_ZN1N13setAnnotationEPc> ; setAnnotation
 804867c:	8b 44 24 10          	mov    0x10(%esp),%eax
 8048680:	8b 00                	mov    (%eax),%eax ; vtable pointer for object 2
 8048682:	8b 10                	mov    (%eax),%edx ; function pointer from vtable
 8048684:	8b 44 24 14          	mov    0x14(%esp),%eax ; object 1
 8048688:	89 44 24 04          	mov    %eax,0x4(%esp)
 804868c:	8b 44 24 10          	mov    0x10(%esp),%eax
 8048690:	89 04 24             	mov    %eax,(%esp)
 8048693:	ff d2                	call   *%edx ; call function

 # Epilogue: Tear down the stack frame and return from main.
 8048695:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8048698:	c9                   	leave
 8048699:	c3                   	ret

# Constructor for class N: Initializes an object of type N.
# Input: pointer to memory (for the object), integer (initial value).
# This constructor sets up the vtable pointer and stores the provided integer.
080486f6 <_ZN1NC1Ei>:
 # Prologue: Establish the stack frame for the constructor.
 80486f6:	55                   	push   %ebp
 80486f7:	89 e5                	mov    %esp,%ebp

 # Object Initialization: Set vtable pointer and store the integer value.
 80486f9:	8b 45 08             	mov    0x8(%ebp),%eax
 80486fc:	c7 00 48 88 04 08    	movl   $0x8048848,(%eax) ; vtable pointer
 8048702:	8b 45 08             	mov    0x8(%ebp),%eax
 8048705:	8b 55 0c             	mov    0xc(%ebp),%edx ; integer value
 8048708:	89 50 68             	mov    %edx,0x68(%eax)

 # Epilogue: Clean up and return.
 804870b:	5d                   	pop    %ebp
 804870c:	c3                   	ret

# Member function setAnnotation: Sets the annotation of an N object.
# Input: object pointer, character pointer (annotation).
# Uses the memcpy function to copy the string to the object's memory.
0804870e <_ZN1N13setAnnotationEPc>:
 # Prologue: Stack frame set up and local variable space allocation.
 804870e:	55                   	push   %ebp
 804870f:	89 e5                	mov    %esp,%ebp
 8048711:	83 ec 18             	sub    $0x18,%esp ; 24 bytes of local variables

 # Annotation Handling: Calculate string length and copy annotation into object.
 8048714:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048717:	89 04 24             	mov    %eax,(%esp)
 804871a:	e8 01 fe ff ff       	call   8048520 <strlen@plt>
 804871f:	8b 55 08             	mov    0x8(%ebp),%edx
 8048722:	83 c2 04             	add    $0x4,%edx
 8048725:	89 44 24 08          	mov    %eax,0x8(%esp) ; length
 8048729:	8b 45 0c             	mov    0xc(%ebp),%eax
 804872c:	89 44 24 04          	mov    %eax,0x4(%esp) ; source
 8048730:	89 14 24             	mov    %edx,(%esp) ; destination
 8048733:	e8 d8 fd ff ff       	call   8048510 <memcpy@plt>

 # Epilogue: Exit the function.
 8048738:	c9                   	leave  
 8048739:	c3                   	ret    

# Operator overload for '+': Sums the integer members of two N objects.
# Input: two object pointers (operands).
# Returns the result of the addition.
0804873a <_ZN1NplERS_>:
 # Prologue: Set up the stack frame.
 804873a:	55                   	push   %ebp
 804873b:	89 e5                	mov    %esp,%ebp

 # Addition Operation: Retrieve and add integer members of both objects.
 804873d:	8b 45 08             	mov    0x8(%ebp),%eax ; this
 8048740:	8b 50 68             	mov    0x68(%eax),%edx
 8048743:	8b 45 0c             	mov    0xc(%ebp),%eax ; other
 8048746:	8b 40 68             	mov    0x68(%eax),%eax
 8048749:	01 d0                	add    %edx,%eax

 # Epilogue: Return result and clean up the stack frame.
 804874b:	5d                   	pop    %ebp
 804874c:	c3                   	ret    
 804874d:	90                   	nop

# Operator overload for '-': Subtracts the integer members of two N objects.
# Input: two object pointers (operands).
# Returns the result of the subtraction.
0804874e <_ZN1NmiERS_>:
 # Prologue: Prepare the stack frame.
 804874e:	55                   	push   %ebp
 804874f:	89 e5                	mov    %esp,%ebp

 # Subtraction Operation: Retrieve integer members and perform subtraction.
 8048751:	8b 45 08             	mov    0x8(%ebp),%eax ; this
 8048754:	8b 50 68             	mov    0x68(%eax),%edx
 8048757:	8b 45 0c             	mov    0xc(%ebp),%eax ; other
 804875a:	8b 40 68             	mov    0x68(%eax),%eax
 804875d:	89 d1                	mov    %edx,%ecx
 804875f:	29 c1                	sub    %eax,%ecx

 # Epilogue: Place result in EAX, clean up the stack frame, and return.
 8048761:	89 c8                	mov    %ecx,%eax
 8048763:	5d                   	pop    %ebp
 8048764:	c3                   	ret
